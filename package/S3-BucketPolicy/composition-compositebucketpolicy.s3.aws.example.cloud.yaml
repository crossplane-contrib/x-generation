## WARNING: This file was autogenerated!
## Manual modifications will be overwritten
## unless ignore: true is set in generate.yaml!
## Last Modification: 10:18:27 on 01-08-2024.

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    example.cloud/provider: example
  name: compositebucketpolicy.s3.aws.example.cloud
spec:
  compositeTypeRef:
    apiVersion: s3.aws.example.cloud/v1alpha1
    kind: CompositeBucketPolicy
  patchSets:
  - name: Name
    patches:
    - fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      type: FromCompositeFieldPath
  - name: External-Name
    patches:
    - fromFieldPath: metadata.annotations[crossplane.io/external-name]
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      type: FromCompositeFieldPath
  - name: Common
    patches:
    - fromFieldPath: metadata.labels['crossplane.io/claim-name']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/claim-name']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['crossplane.io/claim-namespace']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/claim-namespace']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['crossplane.io/composite']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/composite']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['external-name']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['external-name']
      type: FromCompositeFieldPath
  - name: Parameters
    patches:
    - fromFieldPath: spec.deletionPolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.deletionPolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.bucketName
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.bucketName
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.bucketNameRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.bucketNameRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.bucketNameRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.bucketNameRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.bucketNameRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.bucketNameRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.bucketNameSelector.matchControllerRef
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.bucketNameSelector.matchControllerRef
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.bucketNameSelector.matchLabels
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.bucketNameSelector.matchLabels
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.bucketNameSelector.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.bucketNameSelector.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.bucketNameSelector.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.bucketNameSelector.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.policy.id
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.policy.id
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.policy.statements
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.policy.statements
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.policy.version
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.policy.version
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.rawPolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.rawPolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.region
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.region
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.labels
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.labels
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.type
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.type
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.name
      type: FromCompositeFieldPath
  - name: Labels
    patches:
    - fromFieldPath: metadata.labels['controlling.example.cloud/cost-reference']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/cost-reference']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['controlling.example.cloud/owner']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/owner']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['controlling.example.cloud/product']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/product']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/account']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/account']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/environment']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/environment']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/protection-requirement']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/protection-requirement']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/repourl']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/repourl']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/zone']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/zone']
      type: FromCompositeFieldPath
  resources:
  - base:
      apiVersion: s3.aws.crossplane.io/v1alpha3
      kind: BucketPolicy
      metadata:
        labels:
          commonLabelA: commonLabelAValue
          commonLabelB: commonLabelBValue
      spec:
        forProvider: {}
        providerConfigRef:
          name: default
    name: BucketPolicy
    patches:
    - patchSetName: Name
      type: PatchSet
    - patchSetName: External-Name
      type: PatchSet
    - patchSetName: Common
      type: PatchSet
    - patchSetName: Parameters
      type: PatchSet
    - patchSetName: Labels
      type: PatchSet
    - fromFieldPath: metadata.annotations["crossplane.io/external-name"]
      policy:
        fromFieldPath: Optional
      toFieldPath: status.uid
      type: ToCompositeFieldPath
    - fromFieldPath: status.conditions
      policy:
        fromFieldPath: Optional
      toFieldPath: status.observed.conditions
      type: ToCompositeFieldPath
