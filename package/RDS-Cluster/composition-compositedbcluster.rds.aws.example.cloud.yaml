## WARNING: This file was autogenerated!
## Manual modifications will be overwritten
## unless ignore: true is set in generate.yaml!
## Last Modification: 12:43:37 on 06-27-2024.

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    example.cloud/provider: example
  name: compositedbcluster.rds.aws.example.cloud
spec:
  compositeTypeRef:
    apiVersion: rds.aws.example.cloud/v1alpha1
    kind: CompositeDBCluster
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      patchSets:
      - name: Name
        patches:
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          type: FromCompositeFieldPath
      - name: External-Name
        patches:
        - fromFieldPath: metadata.annotations[crossplane.io/external-name]
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          type: FromCompositeFieldPath
      - name: Common
        patches:
        - fromFieldPath: metadata.labels['crossplane.io/claim-name']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['crossplane.io/claim-name']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['crossplane.io/claim-namespace']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['crossplane.io/claim-namespace']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['crossplane.io/composite']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['crossplane.io/composite']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['external-name']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['external-name']
          type: FromCompositeFieldPath
      - name: Parameters
        patches:
        - fromFieldPath: spec.deletionPolicy
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.allocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.allocatedStorage
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.allowMajorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.allowMajorVersionUpgrade
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.applyImmediately
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.applyImmediately
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.autoGeneratePassword
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.autoGeneratePassword
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.availabilityZones
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.availabilityZones
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.backtrackWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.backtrackWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.backupRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.backupRetentionPeriod
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.clusterMembers
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.clusterMembers
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.copyTagsToSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.copyTagsToSnapshot
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.databaseName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.databaseName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterInstanceClass
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterInstanceClass
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterParameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterParameterGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterParameterGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterParameterGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterParameterGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterParameterGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterParameterGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterParameterGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterParameterGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterParameterGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterParameterGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterParameterGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterParameterGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterParameterGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbClusterParameterGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbClusterParameterGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbInstanceParameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbInstanceParameterGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbInstanceParameterGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbInstanceParameterGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbInstanceParameterGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbInstanceParameterGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbInstanceParameterGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbInstanceParameterGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbInstanceParameterGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbInstanceParameterGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbInstanceParameterGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbInstanceParameterGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbInstanceParameterGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbInstanceParameterGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbInstanceParameterGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbInstanceParameterGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSystemId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSystemId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.deleteAutomatedBackups
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.deleteAutomatedBackups
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.deletionProtection
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.deletionProtection
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.domain
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.domain
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.domainIamRoleName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.domainIamRoleName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.enableGlobalWriteForwarding
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.enableGlobalWriteForwarding
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.enableHttpEndpoint
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.enableHttpEndpoint
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.enableLocalWriteForwarding
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.enableLocalWriteForwarding
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.enabledCloudwatchLogsExports
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.enabledCloudwatchLogsExports
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.engine
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.engine
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.engineMode
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.engineMode
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.engineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.engineVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.finalSnapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.finalSnapshotIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.globalClusterIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.globalClusterIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.iamDatabaseAuthenticationEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.iamDatabaseAuthenticationEnabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.iops
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.iops
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.manageMasterUserPassword
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.manageMasterUserPassword
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterPasswordSecretRef.key
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterPasswordSecretRef.key
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterPasswordSecretRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterPasswordSecretRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterPasswordSecretRef.namespace
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterPasswordSecretRef.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUsername
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUsername
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.networkType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.networkType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.port
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.port
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.preferredBackupWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.preferredBackupWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.preferredMaintenanceWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.preferredMaintenanceWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.region
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicationSourceIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicationSourceIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.restoreToTime
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.restoreToTime
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.restoreType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.restoreType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.sourceClusterIdentifierSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime.useLatestRestorableTime
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime.useLatestRestorableTime
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.bucketPrefix
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.bucketPrefix
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.ingestionRole
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.ingestionRole
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.sourceEngine
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.sourceEngine
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import.sourceEngineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import.sourceEngineVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.scalingConfiguration.autoPause
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.scalingConfiguration.autoPause
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.scalingConfiguration.maxCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.scalingConfiguration.maxCapacity
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.scalingConfiguration.minCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.scalingConfiguration.minCapacity
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.scalingConfiguration.secondsUntilAutoPause
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.scalingConfiguration.secondsUntilAutoPause
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.scalingConfiguration.timeoutAction
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.scalingConfiguration.timeoutAction
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.serverlessv2ScalingConfiguration.maxCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.serverlessv2ScalingConfiguration.maxCapacity
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.serverlessv2ScalingConfiguration.minCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.serverlessv2ScalingConfiguration.minCapacity
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.skipFinalSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.skipFinalSnapshot
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.snapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.snapshotIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.sourceRegion
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.sourceRegion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.storageEncrypted
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.storageEncrypted
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.storageType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.storageType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdRefs
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdRefs
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIds
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIds
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.allocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.allocatedStorage
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.allowMajorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.allowMajorVersionUpgrade
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.applyImmediately
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.applyImmediately
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.availabilityZones
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.availabilityZones
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.backtrackWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.backtrackWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.backupRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.backupRetentionPeriod
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.clusterMembers
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.clusterMembers
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.copyTagsToSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.copyTagsToSnapshot
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.databaseName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.databaseName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterInstanceClass
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterInstanceClass
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterParameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterParameterGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterParameterGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterParameterGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterParameterGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterParameterGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterParameterGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterParameterGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterParameterGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterParameterGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterParameterGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterParameterGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterParameterGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterParameterGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbClusterParameterGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbClusterParameterGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbInstanceParameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbInstanceParameterGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbInstanceParameterGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbInstanceParameterGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbInstanceParameterGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbInstanceParameterGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbInstanceParameterGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbInstanceParameterGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbInstanceParameterGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbInstanceParameterGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbInstanceParameterGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbInstanceParameterGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbInstanceParameterGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbInstanceParameterGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbInstanceParameterGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbInstanceParameterGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSystemId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSystemId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.deleteAutomatedBackups
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.deleteAutomatedBackups
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.deletionProtection
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.deletionProtection
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.domain
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.domain
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.domainIamRoleName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.domainIamRoleName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.enableGlobalWriteForwarding
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.enableGlobalWriteForwarding
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.enableHttpEndpoint
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.enableHttpEndpoint
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.enableLocalWriteForwarding
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.enableLocalWriteForwarding
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.enabledCloudwatchLogsExports
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.enabledCloudwatchLogsExports
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.engine
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.engine
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.engineMode
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.engineMode
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.engineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.engineVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.finalSnapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.finalSnapshotIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.globalClusterIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.globalClusterIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.iamDatabaseAuthenticationEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.iamDatabaseAuthenticationEnabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.iops
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.iops
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.manageMasterUserPassword
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.manageMasterUserPassword
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterPasswordSecretRef.key
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterPasswordSecretRef.key
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterPasswordSecretRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterPasswordSecretRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterPasswordSecretRef.namespace
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterPasswordSecretRef.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUsername
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUsername
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.networkType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.networkType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.port
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.port
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.preferredBackupWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.preferredBackupWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.preferredMaintenanceWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.preferredMaintenanceWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicationSourceIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicationSourceIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.restoreToTime
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.restoreToTime
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.restoreType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.restoreType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.sourceClusterIdentifierSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime.useLatestRestorableTime
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime.useLatestRestorableTime
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.bucketPrefix
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.bucketPrefix
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.ingestionRole
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.ingestionRole
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.sourceEngine
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.sourceEngine
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import.sourceEngineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import.sourceEngineVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.scalingConfiguration.autoPause
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.scalingConfiguration.autoPause
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.scalingConfiguration.maxCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.scalingConfiguration.maxCapacity
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.scalingConfiguration.minCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.scalingConfiguration.minCapacity
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.scalingConfiguration.secondsUntilAutoPause
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.scalingConfiguration.secondsUntilAutoPause
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.scalingConfiguration.timeoutAction
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.scalingConfiguration.timeoutAction
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.serverlessv2ScalingConfiguration.maxCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.serverlessv2ScalingConfiguration.maxCapacity
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.serverlessv2ScalingConfiguration.minCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.serverlessv2ScalingConfiguration.minCapacity
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.skipFinalSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.skipFinalSnapshot
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.snapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.snapshotIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.sourceRegion
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.sourceRegion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.storageEncrypted
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.storageEncrypted
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.storageType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.storageType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.tags
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.tags
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdRefs
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdRefs
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIds
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIds
          type: FromCompositeFieldPath
        - fromFieldPath: spec.managementPolicies
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.managementPolicies
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.providerConfigRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.providerConfigRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.configRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.configRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.metadata.labels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.metadata.labels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.metadata.type
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.metadata.type
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.name
          type: FromCompositeFieldPath
      - name: Status
        patches:
        - fromFieldPath: status.atProvider.allocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.allocatedStorage
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.allowMajorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.allowMajorVersionUpgrade
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.applyImmediately
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.applyImmediately
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.arn
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.arn
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.availabilityZones
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.availabilityZones
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.backtrackWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.backtrackWindow
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.backupRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.backupRetentionPeriod
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.clusterMembers
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.clusterMembers
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.clusterResourceId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.clusterResourceId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.copyTagsToSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.copyTagsToSnapshot
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.databaseName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.databaseName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.dbClusterInstanceClass
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.dbClusterInstanceClass
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.dbClusterParameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.dbClusterParameterGroupName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.dbInstanceParameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.dbInstanceParameterGroupName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.dbSubnetGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.dbSubnetGroupName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.dbSystemId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.dbSystemId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.deleteAutomatedBackups
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.deleteAutomatedBackups
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.deletionProtection
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.deletionProtection
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.domain
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.domain
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.domainIamRoleName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.domainIamRoleName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.enableGlobalWriteForwarding
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.enableGlobalWriteForwarding
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.enableHttpEndpoint
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.enableHttpEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.enableLocalWriteForwarding
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.enableLocalWriteForwarding
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.enabledCloudwatchLogsExports
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.enabledCloudwatchLogsExports
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.endpoint
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.endpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.engine
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.engine
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.engineMode
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.engineMode
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.engineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.engineVersion
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.engineVersionActual
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.engineVersionActual
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.finalSnapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.finalSnapshotIdentifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.globalClusterIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.globalClusterIdentifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.hostedZoneId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.hostedZoneId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.iamDatabaseAuthenticationEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.iamDatabaseAuthenticationEnabled
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.iamRoles
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.iamRoles
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.id
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.id
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.iops
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.iops
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.kmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.kmsKeyId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.manageMasterUserPassword
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.manageMasterUserPassword
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.masterUserSecret
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.masterUserSecret
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.masterUserSecretKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.masterUserSecretKmsKeyId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.masterUsername
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.masterUsername
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.networkType
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.networkType
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.port
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.port
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.preferredBackupWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.preferredBackupWindow
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.preferredMaintenanceWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.preferredMaintenanceWindow
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.readerEndpoint
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.readerEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.replicationSourceIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.replicationSourceIdentifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.restoreToPointInTime.restoreToTime
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.restoreToPointInTime.restoreToTime
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.restoreToPointInTime.restoreType
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.restoreToPointInTime.restoreType
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.restoreToPointInTime.sourceClusterIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.restoreToPointInTime.sourceClusterIdentifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.restoreToPointInTime.useLatestRestorableTime
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.restoreToPointInTime.useLatestRestorableTime
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.s3Import.bucketName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.s3Import.bucketName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.s3Import.bucketPrefix
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.s3Import.bucketPrefix
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.s3Import.ingestionRole
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.s3Import.ingestionRole
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.s3Import.sourceEngine
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.s3Import.sourceEngine
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.s3Import.sourceEngineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.s3Import.sourceEngineVersion
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.scalingConfiguration.autoPause
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.scalingConfiguration.autoPause
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.scalingConfiguration.maxCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.scalingConfiguration.maxCapacity
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.scalingConfiguration.minCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.scalingConfiguration.minCapacity
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.scalingConfiguration.secondsUntilAutoPause
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.scalingConfiguration.secondsUntilAutoPause
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.scalingConfiguration.timeoutAction
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.scalingConfiguration.timeoutAction
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.serverlessv2ScalingConfiguration.maxCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.serverlessv2ScalingConfiguration.maxCapacity
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.serverlessv2ScalingConfiguration.minCapacity
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.serverlessv2ScalingConfiguration.minCapacity
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.skipFinalSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.skipFinalSnapshot
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.snapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.snapshotIdentifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.sourceRegion
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.sourceRegion
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.storageEncrypted
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.storageEncrypted
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.storageType
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.storageType
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.tags
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.tags
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.tagsAll
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.tagsAll
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.vpcSecurityGroupIds
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.vpcSecurityGroupIds
          type: ToCompositeFieldPath
        - fromFieldPath: status.observedGeneration
          policy:
            fromFieldPath: Optional
          toFieldPath: status.observedGeneration
          type: ToCompositeFieldPath
      - name: Labels
        patches:
        - fromFieldPath: metadata.labels['controlling.example.cloud/cost-reference']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['controlling.example.cloud/cost-reference']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['controlling.example.cloud/owner']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['controlling.example.cloud/owner']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['controlling.example.cloud/product']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['controlling.example.cloud/product']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['tags.example.cloud/account']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['tags.example.cloud/account']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['tags.example.cloud/environment']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['tags.example.cloud/environment']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['tags.example.cloud/protection-requirement']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['tags.example.cloud/protection-requirement']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['tags.example.cloud/repourl']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['tags.example.cloud/repourl']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['tags.example.cloud/zone']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['tags.example.cloud/zone']
          type: FromCompositeFieldPath
      resources:
      - base:
          apiVersion: rds.aws.upbound.io/v1beta2
          kind: Cluster
          metadata:
            labels:
              commonLabelA: commonLabelAValue
              commonLabelB: commonLabelBValue
          spec:
            providerConfigRef:
              name: default
            writeConnectionSecretToRef:
              namespace: crossplane-system
        connectionDetails:
        - fromConnectionSecretKey: username
          name: username
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: password
          name: password
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: endpoint
          name: endpoint
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: port
          name: port
          type: FromConnectionSecretKey
        name: Cluster
        patches:
        - patchSetName: Name
          type: PatchSet
        - patchSetName: External-Name
          type: PatchSet
        - patchSetName: Common
          type: PatchSet
        - patchSetName: Parameters
          type: PatchSet
        - patchSetName: Status
          type: PatchSet
        - patchSetName: Labels
          type: PatchSet
        - fromFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional
          toFieldPath: status.uid
          type: ToCompositeFieldPath
        - fromFieldPath: status.conditions
          policy:
            fromFieldPath: Optional
          toFieldPath: status.observed.conditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.uid
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
          - string:
              fmt: '%s-secret'
              type: Format
            type: string
          type: FromCompositeFieldPath
    step: patch-and-transform
  writeConnectionSecretsToNamespace: crossplane-system
