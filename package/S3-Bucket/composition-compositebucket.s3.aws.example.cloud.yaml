## WARNING: This file was autogenerated!
## Manual modifications will be overwritten
## unless ignore: true is set in generate.yaml!
## Last Modification: 10:18:05 on 01-08-2024.

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    example.cloud/provider: example
  name: compositebucket.s3.aws.example.cloud
spec:
  compositeTypeRef:
    apiVersion: s3.aws.example.cloud/v1alpha1
    kind: CompositeBucket
  patchSets:
  - name: Name
    patches:
    - fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      type: FromCompositeFieldPath
  - name: External-Name
    patches:
    - fromFieldPath: metadata.annotations[crossplane.io/external-name]
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      type: FromCompositeFieldPath
  - name: Common
    patches:
    - fromFieldPath: metadata.labels['crossplane.io/claim-name']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/claim-name']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['crossplane.io/claim-namespace']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/claim-namespace']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['crossplane.io/composite']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/composite']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['external-name']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['external-name']
      type: FromCompositeFieldPath
  - name: Parameters
    patches:
    - fromFieldPath: spec.deletionPolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.deletionPolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.accelerateConfiguration.status
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.accelerateConfiguration.status
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.acl
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.acl
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.corsConfiguration.corsRules
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.corsConfiguration.corsRules
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.grantFullControl
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.grantFullControl
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.grantRead
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.grantRead
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.grantReadAcp
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.grantReadAcp
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.grantWrite
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.grantWrite
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.grantWriteAcp
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.grantWriteAcp
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.lifecycleConfiguration.rules
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.lifecycleConfiguration.rules
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.locationConstraint
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.locationConstraint
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetBucket
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetBucket
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetBucketRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetBucketRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetBucketRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetBucketRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetBucketRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetBucketRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetBucketSelector.matchControllerRef
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetBucketSelector.matchControllerRef
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetBucketSelector.matchLabels
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetBucketSelector.matchLabels
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetBucketSelector.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetBucketSelector.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetBucketSelector.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetBucketSelector.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetGrants
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetGrants
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.loggingConfiguration.targetPrefix
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.loggingConfiguration.targetPrefix
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.notificationConfiguration.lambdaFunctionConfigurations
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.notificationConfiguration.lambdaFunctionConfigurations
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.notificationConfiguration.queueConfigurations
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.notificationConfiguration.queueConfigurations
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.notificationConfiguration.topicConfigurations
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.notificationConfiguration.topicConfigurations
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.objectLockEnabledForBucket
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.objectLockEnabledForBucket
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.objectOwnership
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.objectOwnership
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.paymentConfiguration.payer
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.paymentConfiguration.payer
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.publicAccessBlockConfiguration.blockPublicAcls
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.publicAccessBlockConfiguration.blockPublicAcls
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.publicAccessBlockConfiguration.blockPublicPolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.publicAccessBlockConfiguration.blockPublicPolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.publicAccessBlockConfiguration.ignorePublicAcls
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.publicAccessBlockConfiguration.ignorePublicAcls
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.publicAccessBlockConfiguration.restrictPublicBuckets
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.publicAccessBlockConfiguration.restrictPublicBuckets
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.role
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.role
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.roleRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.roleRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.roleRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.roleRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.roleRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.roleRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.roleSelector.matchControllerRef
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.roleSelector.matchControllerRef
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.roleSelector.matchLabels
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.roleSelector.matchLabels
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.roleSelector.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.roleSelector.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.roleSelector.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.roleSelector.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.replicationConfiguration.rules
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.replicationConfiguration.rules
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.serverSideEncryptionConfiguration.rules
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.serverSideEncryptionConfiguration.rules
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.versioningConfiguration.mfaDelete
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.versioningConfiguration.mfaDelete
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.versioningConfiguration.status
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.versioningConfiguration.status
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.websiteConfiguration.errorDocument.key
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.websiteConfiguration.errorDocument.key
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.websiteConfiguration.indexDocument.suffix
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.websiteConfiguration.indexDocument.suffix
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.websiteConfiguration.redirectAllRequestsTo.hostName
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.websiteConfiguration.redirectAllRequestsTo.hostName
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.websiteConfiguration.redirectAllRequestsTo.protocol
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.websiteConfiguration.redirectAllRequestsTo.protocol
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.websiteConfiguration.routingRules
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.websiteConfiguration.routingRules
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.labels
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.labels
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.type
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.type
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.name
      type: FromCompositeFieldPath
  - name: Labels
    patches:
    - fromFieldPath: metadata.labels['controlling.example.cloud/cost-reference']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/cost-reference']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['controlling.example.cloud/owner']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/owner']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['controlling.example.cloud/product']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/product']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/account']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/account']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/environment']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/environment']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/protection-requirement']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/protection-requirement']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/repourl']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/repourl']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/zone']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/zone']
      type: FromCompositeFieldPath
  - name: Tags
    patches:
    - fromFieldPath: metadata.labels[tags.example.cloud/account]
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.tagging.tagSet[0].value
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[tags.example.cloud/environment]
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.tagging.tagSet[1].value
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[tags.example.cloud/protection-requirement]
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.tagging.tagSet[2].value
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[tags.example.cloud/repourl]
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.tagging.tagSet[3].value
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[tags.example.cloud/zone]
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.tagging.tagSet[4].value
      type: FromCompositeFieldPath
  resources:
  - base:
      apiVersion: s3.aws.crossplane.io/v1beta1
      kind: Bucket
      metadata:
        labels:
          commonLabelA: commonLabelAValue
          commonLabelB: commonLabelBValue
      spec:
        forProvider:
          tagging:
            tagSet:
            - key: tags.example.cloud/account
            - key: tags.example.cloud/environment
            - key: tags.example.cloud/protection-requirement
            - key: tags.example.cloud/repourl
            - key: tags.example.cloud/zone
            - key: commonLocalTagA
              value: comonLocalTagAValue
            - key: commonLocalTagB
              value: comonLocalTagBValue
            - key: commonTagA
              value: comonTagAValue
            - key: commonTagB
              value: comonTagBValue
        providerConfigRef:
          name: default
    name: Bucket
    patches:
    - patchSetName: Name
      type: PatchSet
    - patchSetName: External-Name
      type: PatchSet
    - patchSetName: Common
      type: PatchSet
    - patchSetName: Parameters
      type: PatchSet
    - patchSetName: Labels
      type: PatchSet
    - patchSetName: Tags
      type: PatchSet
    - fromFieldPath: status.atProvider.arn
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.arn
      type: ToCompositeFieldPath
    - fromFieldPath: metadata.annotations["crossplane.io/external-name"]
      policy:
        fromFieldPath: Optional
      toFieldPath: status.uid
      type: ToCompositeFieldPath
    - fromFieldPath: status.conditions
      policy:
        fromFieldPath: Optional
      toFieldPath: status.observed.conditions
      type: ToCompositeFieldPath
