## WARNING: This file was autogenerated!
## Manual modifications will be overwritten
## unless ignore: true is set in generate.yaml!
## Last Modification: 10:06:27 on 01-08-2024.

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    example.cloud/provider: example
  name: compositeinstanceprofile.iam.aws.example.cloud
spec:
  compositeTypeRef:
    apiVersion: iam.aws.example.cloud/v1alpha1
    kind: CompositeInstanceProfile
  patchSets:
  - name: Name
    patches:
    - fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      type: FromCompositeFieldPath
  - name: External-Name
    patches:
    - fromFieldPath: metadata.annotations[crossplane.io/external-name]
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      type: FromCompositeFieldPath
  - name: Common
    patches:
    - fromFieldPath: metadata.labels['crossplane.io/claim-name']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/claim-name']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['crossplane.io/claim-namespace']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/claim-namespace']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['crossplane.io/composite']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['crossplane.io/composite']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['external-name']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['external-name']
      type: FromCompositeFieldPath
  - name: Parameters
    patches:
    - fromFieldPath: spec.deletionPolicy
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.deletionPolicy
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.path
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.path
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.role
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.role
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.roleRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.roleRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.roleRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.roleRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.roleRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.roleRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.roleSelector.matchControllerRef
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.roleSelector.matchControllerRef
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.roleSelector.matchLabels
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.roleSelector.matchLabels
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.roleSelector.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.roleSelector.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.forProvider.roleSelector.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.forProvider.roleSelector.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.providerConfigRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.providerConfigRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.labels
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.labels
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.metadata.type
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.metadata.type
      type: FromCompositeFieldPath
    - fromFieldPath: spec.publishConnectionDetailsTo.name
      policy:
        fromFieldPath: Optional
      toFieldPath: spec.publishConnectionDetailsTo.name
      type: FromCompositeFieldPath
  - name: Labels
    patches:
    - fromFieldPath: metadata.labels['controlling.example.cloud/cost-reference']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/cost-reference']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['controlling.example.cloud/owner']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/owner']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['controlling.example.cloud/product']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['controlling.example.cloud/product']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/account']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/account']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/environment']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/environment']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/protection-requirement']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/protection-requirement']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/repourl']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/repourl']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['tags.example.cloud/zone']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['tags.example.cloud/zone']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['locala.io/test']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['locala.io/test']
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels['localb.io/testb']
      policy:
        fromFieldPath: Optional
      toFieldPath: metadata.labels['localb.io/testb']
      type: FromCompositeFieldPath
  - name: Tags
    patches:
    - fromFieldPath: metadata.labels[locala.io/test]
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.tags[0].value
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.labels[localb.io/testb]
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.tags[1].value
      type: FromCompositeFieldPath
  resources:
  - base:
      apiVersion: iam.aws.crossplane.io/v1alpha1
      kind: InstanceProfile
      metadata:
        labels:
          commonLocalLabelA: commonLocalLabelAValue
          commonLocalLabelB: commonLoaclLabelBValue
      spec:
        forProvider:
          tags:
          - key: locala.io/test
          - key: localb.io/testb
          - key: commonLocalTagA
            value: comonLocalTagAValue
          - key: commonLocalTagB
            value: comonLocalTagBValue
          - key: commonTagA
            value: comonTagAValue
          - key: commonTagB
            value: comonTagBValue
        providerConfigRef:
          name: default
    name: InstanceProfile
    patches:
    - patchSetName: Name
      type: PatchSet
    - patchSetName: External-Name
      type: PatchSet
    - patchSetName: Common
      type: PatchSet
    - patchSetName: Parameters
      type: PatchSet
    - patchSetName: Labels
      type: PatchSet
    - patchSetName: Tags
      type: PatchSet
    - fromFieldPath: status.atProvider.arn
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.arn
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.createDate
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.createDate
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.instanceProfileID
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.instanceProfileID
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.instanceProfileName
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.instanceProfileName
      type: ToCompositeFieldPath
    - fromFieldPath: status.atProvider.roles
      policy:
        fromFieldPath: Optional
      toFieldPath: status.atProvider.roles
      type: ToCompositeFieldPath
    - fromFieldPath: metadata.annotations["crossplane.io/external-name"]
      policy:
        fromFieldPath: Optional
      toFieldPath: status.uid
      type: ToCompositeFieldPath
    - fromFieldPath: status.conditions
      policy:
        fromFieldPath: Optional
      toFieldPath: status.observed.conditions
      type: ToCompositeFieldPath
